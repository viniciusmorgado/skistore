name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  BUCKET_NAME: "${{ secrets.STATE_BUCKET_NAME }}"
  AWS_REGION: "${{ secrets.AWS_REGION }}"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
 
    defaults:
      run:
        shell: bash

    steps:
      - name: "[Repo] Checkout source code"
        uses: actions/checkout@v4

      - name: "[Tooling] Set up AWS CLI and Terraform"
        run: |
          sudo snap refresh
          sudo snap install aws-cli --classic
          sudo snap install terraform --classic

      - name: "[Auth] Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "[S3 Infra] Create Terraform state bucket"
        run: |
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket doesn't exist. Creating..."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$AWS_REGION" --create-bucket-configuration LocationConstraint="$AWS_REGION"
          else
            echo "Bucket already exists. Skipping creation."
          fi

      - name: "[S3 Security] Enforce bucket encryption (KMS)"
        run: |
          ENCRYPTION_STATUS=$(aws s3api get-bucket-encryption --bucket "$BUCKET_NAME" 2>/dev/null || true)
          
          if echo "$ENCRYPTION_STATUS" | grep -q '"SSEAlgorithm": "aws:kms"'; then
            echo "Bucket is already encrypted with KMS. Skipping."
          else
          
          echo "Applying encryption settings..."
          aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration '{
            "Rules": [
              {
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "aws:kms"
                }
              }
            ]
          }'
          fi
 
      - name: "[S3 Security] Enforce PublicAccessBlock settings"
        run: |
          CONFIG_JSON=$(aws s3api get-public-access-block --bucket "$BUCKET_NAME" 2>/dev/null || echo "")
          
          missing=()
          
          if [ -z "$CONFIG_JSON" ]; then
            echo "PublicAccessBlock config not found or unreadable."
            missing+=("BlockPublicAcls" "IgnorePublicAcls" "BlockPublicPolicy" "RestrictPublicBuckets")
          else
            for key in BlockPublicAcls IgnorePublicAcls BlockPublicPolicy RestrictPublicBuckets; do
              value=$(jq -r ".PublicAccessBlockConfiguration.$key" <<< "$CONFIG_JSON" 2>/dev/null)
          
              if [[ "$value" != "true" ]]; then
                if [[ "$value" == "false" ]]; then
                  echo "PublicAccessBlock: $key is explicitly set to false"
                else
                  echo "PublicAccessBlock: $key is missing or not readable"
                fi
                missing+=("$key")
              fi
            done
          fi
          
          if [ ${#missing[@]} -eq 0 ]; then
            echo "All required public access block settings are correctly applied."
          else
            echo "Applying missing or incorrect settings: ${missing[*]}"
            aws s3api put-public-access-block --bucket "$BUCKET_NAME" --public-access-block-configuration '{
              "BlockPublicAcls": true,
              "IgnorePublicAcls": true,
              "BlockPublicPolicy": true,
              "RestrictPublicBuckets": true
            }'
            echo "Public access block configuration updated."
          fi

      - name: "[S3 Compliance] Enable bucket versioning"
        run: |
          get_bucket_versioning_policy=$(aws s3api get-bucket-versioning --bucket "$BUCKET_NAME" 2>/dev/null || echo "{}")
          get_policy_status=$(echo "$get_bucket_versioning_policy" | jq -r '.Status // empty')
          
          if [[ -z "$get_policy_status" || "$get_policy_status" == "Suspended" || "$get_policy_status" != "Enabled" ]]; then
            echo "Enabling bucket versioning (current: ${get_policy_status:-Not Set})"
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
          else
            echo "Bucket is already versioned. Skipping changes."
          fi
      
      - name: "[Terraform] Format check"
        run: terraform fmt -check

      - name: "[Terraform] Validate"
        run: terraform validate
      
      - name: "[Terraform] Initialize"
        working-directory: ./infrastructure/terraform/environments/prod
        run: terraform init -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: "[DynamoDB Infra] Create Terraform lock table if missing"
        working-directory: ./infrastructure/terraform/environments/prod
        run: |
          TABLE_NAME="${{ secrets.LOCK_IN_DYNAMO_TABLE_NAME }}"

          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$AWS_REGION" 2>/dev/null; then
            echo "Table doesn't exist. Creating via Terraform."
            terraform apply -lock=false \
              -target=aws_dynamodb_table.terraform_locks \
              -var="region=${{ secrets.AWS_REGION }}" \
              -var="project_name=${{ secrets.TF_PROJECT_NAME }}" \
              -var="db_user=${{ secrets.TF_DB_USER }}" \
              -var="db_pass=${{ secrets.TF_DB_PASS }}" \
              -auto-approve
          else
            echo "Lock table already exists. Skipping creation."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: "[Terraform] Plan"
        working-directory: ./infrastructure/terraform/environments/prod
        run: |
          terraform plan -input=false \
            -var="region=${{ secrets.AWS_REGION }}" \
            -var="project_name=${{ secrets.TF_PROJECT_NAME }}" \
            -var="db_user=${{ secrets.TF_DB_USER }}" \
            -var="db_pass=${{ secrets.TF_DB_PASS }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Terraform Apply
      #   working-directory: ./infrastructure/terraform/environments/prod
      #   run: |
      #     terraform apply -input=false -auto-approve \
      #       -var="region=${{ secrets.AWS_REGION }}" \
      #       -var="project_name=${{ secrets.TF_PROJECT_NAME }}" \
      #       -var="db_user=${{ secrets.TF_DB_USER }}" \
      #       -var="db_pass=${{ secrets.TF_DB_PASS }}"
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
