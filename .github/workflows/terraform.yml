name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
 
permissions:
  contents: read
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up AWS CLI
      run: |
        sudo snap refresh
        sudo snap install aws-cli --classic
        sudo snap install terraform --classic

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create Terraform State S3 bucket if not exists
      run: |
        BUCKET_NAME="skistore-state-bucket"
        REGION="${{ secrets.AWS_REGION }}"
        if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
          echo "Bucket doesn't exist. Creating..."
          aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" --create-bucket-configuration LocationConstraint="$REGION"
        else
          echo "Bucket already exists. Skipping creation."
        fi

        # Apply bucket encryption regardless
        aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration '{
        "Rules": [
          {
            "ApplyServerSideEncryptionByDefault": {
            "SSEAlgorithm": "AES256"
          }
         }
        ]
         }'
    
    - name: Terraform Init
      working-directory: ./infrastructure/terraform/environments/prod
      run: terraform init -input=false
      # run: terraform init -reconfigure -input=false
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Create DynamoDB Lock Table if not exists
      working-directory: ./infrastructure/terraform/environments/prod
      run: |
        TABLE_NAME="terraform-lock-table"
        REGION="${{ secrets.AWS_REGION }}"
        
        if ! aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$REGION" 2>/dev/null; then
          echo "Table doesn't exist. Creating via Terraform."
          terraform apply -lock=false \
            -target=aws_dynamodb_table.terraform_locks \
            -var="region=${{ secrets.AWS_REGION }}" \
            -var="project_name=${{ secrets.TF_PROJECT_NAME }}" \
            -var="db_user=${{ secrets.TF_DB_USER }}" \
            -var="db_pass=${{ secrets.TF_DB_PASS }}" \
            -auto-approve
        else
          echo "Lock table already exists. Skipping creation."
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Plan
      working-directory: ./infrastructure/terraform/environments/prod
      run: |
        terraform plan -input=false \
          -var="region=${{ secrets.AWS_REGION }}" \
          -var="project_name=${{ secrets.TF_PROJECT_NAME }}" \
          -var="db_user=${{ secrets.TF_DB_USER }}" \
          -var="db_pass=${{ secrets.TF_DB_PASS }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # - name: Terraform Apply
    #   working-directory: ./infrastructure/terraform/environments/prod
    #   run: terraform apply -input=false
    #   env:
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
