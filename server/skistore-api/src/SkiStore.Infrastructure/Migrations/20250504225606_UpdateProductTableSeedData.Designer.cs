// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkiStore.Infrastructure.Data;

#nullable disable

namespace SkiStore.Infrastructure.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20250504225606_UpdateProductTableSeedData")]
    partial class UpdateProductTableSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkiStore.Core.Aggregates.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerEmail")
                        .HasColumnType("text");

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SkiStore.Core.Aggregates.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SkiStore.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Line1")
                        .HasColumnType("text");

                    b.Property<string>("Line2")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            Country = "USA",
                            Line1 = "123 Main St",
                            Line2 = "Apt 4B",
                            PostalCode = "10001",
                            State = "NY"
                        },
                        new
                        {
                            Id = 2,
                            City = "Los Angeles",
                            Country = "USA",
                            Line1 = "456 Elm St",
                            PostalCode = "90001",
                            State = "CA"
                        },
                        new
                        {
                            Id = 3,
                            City = "Chicago",
                            Country = "USA",
                            Line1 = "789 Oak St",
                            Line2 = "Suite 100",
                            PostalCode = "60601",
                            State = "IL"
                        },
                        new
                        {
                            Id = 4,
                            City = "Houston",
                            Country = "USA",
                            Line1 = "101 Pine St",
                            PostalCode = "77001",
                            State = "TX"
                        },
                        new
                        {
                            Id = 5,
                            City = "Phoenix",
                            Country = "USA",
                            Line1 = "202 Maple St",
                            Line2 = "Unit 5",
                            PostalCode = "85001",
                            State = "AZ"
                        },
                        new
                        {
                            Id = 6,
                            City = "Philadelphia",
                            Country = "USA",
                            Line1 = "303 Cedar St",
                            PostalCode = "19019",
                            State = "PA"
                        },
                        new
                        {
                            Id = 7,
                            City = "San Antonio",
                            Country = "USA",
                            Line1 = "404 Birch St",
                            Line2 = "Apt 3C",
                            PostalCode = "78201",
                            State = "TX"
                        },
                        new
                        {
                            Id = 8,
                            City = "San Diego",
                            Country = "USA",
                            Line1 = "505 Walnut St",
                            PostalCode = "92101",
                            State = "CA"
                        },
                        new
                        {
                            Id = 9,
                            City = "Dallas",
                            Country = "USA",
                            Line1 = "606 Cherry St",
                            Line2 = "Suite 200",
                            PostalCode = "75201",
                            State = "TX"
                        },
                        new
                        {
                            Id = 10,
                            City = "San Jose",
                            Country = "USA",
                            Line1 = "707 Spruce St",
                            PostalCode = "95101",
                            State = "CA"
                        });
                });

            modelBuilder.Entity("SkiStore.Core.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SkiStore.Core.Entities.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryTime = "1-2 Days",
                            Description = "Fastest delivery time",
                            Price = 10m,
                            ShortName = "UPS1"
                        },
                        new
                        {
                            Id = 2,
                            DeliveryTime = "2-5 Days",
                            Description = "Get it within 5 days",
                            Price = 5m,
                            ShortName = "UPS2"
                        },
                        new
                        {
                            Id = 3,
                            DeliveryTime = "5-10 Days",
                            Description = "Slower but cheap",
                            Price = 2m,
                            ShortName = "UPS3"
                        },
                        new
                        {
                            Id = 4,
                            DeliveryTime = "1-2 Weeks",
                            Description = "Free! You get what you pay for",
                            Price = 0m,
                            ShortName = "FREE"
                        });
                });

            modelBuilder.Entity("SkiStore.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Avalanche",
                            Description = "Engineered for all-terrain skiing with superior control and comfort.",
                            Name = "Blue Avalanche Boot",
                            PictureUrl = "/images/products/blue-boot.png",
                            Price = 199.99m,
                            QuantityInStock = 50,
                            Type = "Boots"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Frostbite",
                            Description = "Cold-resistant and precision-fitted boot for expert-level skiing.",
                            Name = "Purple Frostbite Boot",
                            PictureUrl = "/images/products/purple-boot-1.png",
                            Price = 189.99m,
                            QuantityInStock = 35,
                            Type = "Boots"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Frostbite",
                            Description = "Identical model for testing duplicate filter behavior.",
                            Name = "Purple Frostbite Boot",
                            PictureUrl = "/images/products/purple-boot-2.png",
                            Price = 189.99m,
                            QuantityInStock = 30,
                            Type = "Boots"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "IceClaw",
                            Description = "Aggressive design for high-speed downhill skiing.",
                            Name = "Red IceClaw Boot",
                            PictureUrl = "/images/products/red-boot-1.png",
                            Price = 209.99m,
                            QuantityInStock = 40,
                            Type = "Boots"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Inferna",
                            Description = "Thermal-insulated boot for enhanced warmth and performance.",
                            Name = "Red Inferna Boot",
                            PictureUrl = "/images/products/red-boot-2.png",
                            Price = 219.99m,
                            QuantityInStock = 42,
                            Type = "Boots"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Avalanche",
                            Description = "Waterproof gloves with reinforced grip and thermal lining.",
                            Name = "Blue Avalanche Gloves",
                            PictureUrl = "/images/products/blue-gloves.png",
                            Price = 29.99m,
                            QuantityInStock = 60,
                            Type = "Gloves"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Stormrider",
                            Description = "All-weather gloves designed for intense mountain use.",
                            Name = "Green Stormrider Gloves",
                            PictureUrl = "/images/products/green-gloves-1.png",
                            Price = 24.99m,
                            QuantityInStock = 55,
                            Type = "Gloves"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Frostborn",
                            Description = "Breathable and warm gloves for mid-range temperatures.",
                            Name = "Green Frostborn Gloves",
                            PictureUrl = "/images/products/green-gloves-2.png",
                            Price = 22.99m,
                            QuantityInStock = 48,
                            Type = "Gloves"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Nightshade",
                            Description = "Sleek insulated gloves for comfortable long sessions.",
                            Name = "Purple Nightshade Gloves",
                            PictureUrl = "/images/products/purple-gloves.png",
                            Price = 26.99m,
                            QuantityInStock = 52,
                            Type = "Gloves"
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Alpine",
                            Description = "Lightweight and stylish winter hat for ski season.",
                            Name = "Blue Alpine Hat",
                            PictureUrl = "/images/products/blue-hat.png",
                            Price = 19.99m,
                            QuantityInStock = 33,
                            Type = "Hats"
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Windhowl",
                            Description = "Windproof and breathable hat for alpine weather.",
                            Name = "Green Windhowl Hat",
                            PictureUrl = "/images/products/green-hat.png",
                            Price = 17.99m,
                            QuantityInStock = 38,
                            Type = "Hats"
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Eclipse",
                            Description = "Comfortable and thermal-retentive ski hat.",
                            Name = "Purple Eclipse Hat",
                            PictureUrl = "/images/products/purple-hat.png",
                            Price = 18.99m,
                            QuantityInStock = 29,
                            Type = "Hats"
                        },
                        new
                        {
                            Id = 13,
                            Brand = "Hawk",
                            Description = "High-speed carving board with carbon core.",
                            Name = "Midnight Hawk Ski Board",
                            PictureUrl = "/images/products/ski-board-1.png",
                            Price = 320.00m,
                            QuantityInStock = 15,
                            Type = "Boards"
                        },
                        new
                        {
                            Id = 14,
                            Brand = "Talon",
                            Description = "Freestyle board with reinforced bindings.",
                            Name = "Crimson Talon Ski Board",
                            PictureUrl = "/images/products/ski-board-2.png",
                            Price = 299.99m,
                            QuantityInStock = 21,
                            Type = "Boards"
                        },
                        new
                        {
                            Id = 15,
                            Brand = "Serpent",
                            Description = "Lightweight and flexible board for tricks.",
                            Name = "Frost Serpent Ski Board",
                            PictureUrl = "/images/products/ski-board-3.png",
                            Price = 289.99m,
                            QuantityInStock = 25,
                            Type = "Boards"
                        },
                        new
                        {
                            Id = 16,
                            Brand = "Shadowline",
                            Description = "Wide profile board for backcountry powder.",
                            Name = "Shadowline Drift Ski Board",
                            PictureUrl = "/images/products/ski-board-4.png",
                            Price = 310.00m,
                            QuantityInStock = 18,
                            Type = "Boards"
                        },
                        new
                        {
                            Id = 17,
                            Brand = "Glacier",
                            Description = "Edge-controlled board for slalom skiing.",
                            Name = "Glacier Edge Ski Board",
                            PictureUrl = "/images/products/ski-board-5.png",
                            Price = 305.00m,
                            QuantityInStock = 17,
                            Type = "Boards"
                        },
                        new
                        {
                            Id = 18,
                            Brand = "Volt",
                            Description = "Stiff board for experienced riders and high-speed descent.",
                            Name = "Volt Striker Ski Board",
                            PictureUrl = "/images/products/ski-board-6.png",
                            Price = 315.00m,
                            QuantityInStock = 22,
                            Type = "Boards"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkiStore.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkiStore.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiStore.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkiStore.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiStore.Core.Aggregates.Order.Order", b =>
                {
                    b.HasOne("SkiStore.Core.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId");

                    b.OwnsOne("SkiStore.Core.Aggregates.Order.PaymentSummary", "PaymentSummary", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("integer");

                            b1.Property<string>("Brand")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("ExpMonth")
                                .HasColumnType("integer");

                            b1.Property<int>("ExpYear")
                                .HasColumnType("integer");

                            b1.Property<int>("Last4")
                                .HasColumnType("integer");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("SkiStore.Core.Aggregates.Order.ShippingAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("DeliveryMethod");

                    b.Navigation("PaymentSummary");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("SkiStore.Core.Aggregates.Order.OrderItem", b =>
                {
                    b.HasOne("SkiStore.Core.Aggregates.Order.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SkiStore.Core.Aggregates.Order.ProductItemOrdered", "ItemOrdered", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("integer");

                            b1.Property<string>("PictureUrl")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("ProductId")
                                .HasColumnType("integer");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("ItemOrdered")
                        .IsRequired();
                });

            modelBuilder.Entity("SkiStore.Core.Entities.AppUser", b =>
                {
                    b.HasOne("SkiStore.Core.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SkiStore.Core.Aggregates.Order.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
